import java.util.*;

public class Matrix_Layer_Rotation {

    static Scanner scanner = new Scanner(System.in);

    static int row, coloumn, idx, rotation;

    static List<Integer> list = new ArrayList<Integer>();

    //static List<Integer> layerLenght=new ArrayList<Integer>();
    static List<List<Integer>> total = new ArrayList<List<Integer>>();

    public static void main(String[] args) {

        row = scanner.nextInt();
        coloumn = scanner.nextInt();

        rotation = scanner.nextInt();

        int[][] matrix = new int[row+1][coloumn+1];

        //System.out.println("Enter the elements: ");
        for (int i = 0; i < row; i++) {

            for (int j = 0; j < coloumn; j++) {

                matrix[i][j] = scanner.nextInt();

            }

        }

        //System.out.println("The inputed matrix is: ");
        //for(int i=0;i<row;i++){
        //for(int j=0;j<coloumn;j++){
        //  System.out.print(matrix[i][j]+"  ");
        //}
        //  System.out.println("");
        //}
        int lenghtLayer = 0;

        for (int i = 0; i < Math.max(row, coloumn) / 2; i++) {

            int layer = 0;

            for (int j = i; j < coloumn - i - 1; j++) {

                list.add(matrix[i][j]);
                layer++;
            }
            for (int j = i; j < row - i - 1; j++) {
                if(coloumn - i -1 <0){
                    break;
                }
                list.add(matrix[j][coloumn - i -1 ]);
                layer++;
            }

            for (int j = coloumn - i - 1; j > i; j--) {

                list.add(matrix[row - i - 1][j]);
                layer++;
            }

            for (int j = row - i - 1; j > i; j--) {

                list.add(matrix[j][i]);
                layer++;
            }

            total.add(list);
            //System.out.println("length "+i+": "+list.size());

            //   list.clear();
            list = new ArrayList<Integer>();
            //    System.out.println("length "+i+": "+list.size());
            // layerLenght.add(layer);

        }
        //System.out.println("\ntotal length: "+total.size()+"\n experment element: "+total.get(0).size());
        //System.out.println("\nThe rotate part: ");

        //int []a=new int[list.size()];
        //  int y=0;
        //for(List i:total){
        //  System.out.println(String.valueOf(i)+" "+i.size());
        //}
        //int y=coloumn;
        for (int i = 0; i < Math.min(row, coloumn) / 2; i++) {

            idx = rotation % total.get(i).size();
            //   System.out.println("\nlayer: "+total.get(i).size());
            // System.out.println("\nThe number "+i+" idx : "+idx);

            for (int j = i; j < coloumn - i - 1; j++) {

                (matrix[i][j]) = total.get(i).get(idx);

                idx = inc(total.get(i).size());

                //System.out.print("("+idx+")" );
            }

            for (int j = i; j < row - i - 1; j++) {

                (matrix[j][coloumn - i - 1]) = total.get(i).get(idx);

                idx = inc(total.get(i).size());
                //    System.out.print("("+idx+")" );
            }

            for (int j = coloumn - i - 1; j > i; j--) {

                (matrix[row - i - 1][j]) = total.get(i).get(idx);

                idx = inc(total.get(i).size());
                //  System.out.print("("+idx+")" );
            }

            for (int j = row - i - 1; j > i; j--) {

                (matrix[j][i]) = total.get(i).get(idx);

                idx = inc(total.get(i).size());
                //System.out.print("("+idx+")" );
            }
            //idx=inc();
            //   rotation=list.indexOf(  list.get(layerLenght.get(i)+1  ));
            //  y-=2;

            // System.out.println("number: "+list.indexOf(  list.get(layerLenght.get(i)+1  ))  );
        }

        //System.out.println("\n\nThe new matrix: ");
        for (int i = 0; i < row; i++) {

            for (int j = 0; j < coloumn; j++) {

                System.out.print(matrix[i][j] + " ");

            }

            System.out.println("");

        }

    }

    static int inc(int length) {

        return (idx + 1) % length;

    }

}
